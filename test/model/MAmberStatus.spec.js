/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MAmberStatus', function() {
      beforeEach(function() {
        instance = new AmberApiServer.MAmberStatus();
      });

      it('should create an instance of MAmberStatus', function() {
        // TODO: update the code to test MAmberStatus
        expect(instance).to.be.a(AmberApiServer.MAmberStatus);
      });

      it('should have the property versionNumber (base name: "VersionNumber")', function() {
        // TODO: update the code to test the property versionNumber
        expect(instance).to.have.property('versionNumber');
        // expect(instance.versionNumber).to.be(expectedValueLiteral);
      });

      it('should have the property mStatus (base name: "m_Status")', function() {
        // TODO: update the code to test the property mStatus
        expect(instance).to.have.property('mStatus');
        // expect(instance.mStatus).to.be(expectedValueLiteral);
      });

      it('should have the property mMessage (base name: "m_Message")', function() {
        // TODO: update the code to test the property mMessage
        expect(instance).to.have.property('mMessage');
        // expect(instance.mMessage).to.be(expectedValueLiteral);
      });

      it('should have the property mProgress (base name: "m_Progress")', function() {
        // TODO: update the code to test the property mProgress
        expect(instance).to.have.property('mProgress');
        // expect(instance.mProgress).to.be(expectedValueLiteral);
      });

      it('should have the property mCurrentClusterCount (base name: "m_CurrentClusterCount")', function() {
        // TODO: update the code to test the property mCurrentClusterCount
        expect(instance).to.have.property('mCurrentClusterCount');
        // expect(instance.mCurrentClusterCount).to.be(expectedValueLiteral);
      });

      it('should have the property mRetryCount (base name: "m_RetryCount")', function() {
        // TODO: update the code to test the property mRetryCount
        expect(instance).to.have.property('mRetryCount');
        // expect(instance.mRetryCount).to.be(expectedValueLiteral);
      });

      it('should have the property mStreamingWindowSize (base name: "m_StreamingWindowSize")', function() {
        // TODO: update the code to test the property mStreamingWindowSize
        expect(instance).to.have.property('mStreamingWindowSize');
        // expect(instance.mStreamingWindowSize).to.be(expectedValueLiteral);
      });

      it('should have the property mTotalInferences (base name: "m_TotalInferences")', function() {
        // TODO: update the code to test the property mTotalInferences
        expect(instance).to.have.property('mTotalInferences');
        // expect(instance.mTotalInferences).to.be(expectedValueLiteral);
      });

      it('should have the property mTotalSamplesWritten (base name: "m_TotalSamplesWritten")', function() {
        // TODO: update the code to test the property mTotalSamplesWritten
        expect(instance).to.have.property('mTotalSamplesWritten');
        // expect(instance.mTotalSamplesWritten).to.be(expectedValueLiteral);
      });

    });
  });

}));
