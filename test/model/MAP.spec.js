/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MAP', function() {
      beforeEach(function() {
        instance = new AmberApiServer.MAP();
      });

      it('should create an instance of MAP', function() {
        // TODO: update the code to test MAP
        expect(instance).to.be.a(AmberApiServer.MAP);
      });

      it('should have the property versionNumber (base name: "VersionNumber")', function() {
        // TODO: update the code to test the property versionNumber
        expect(instance).to.have.property('versionNumber');
        // expect(instance.versionNumber).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotuneRange (base name: "m_AutotuneRange")', function() {
        // TODO: update the code to test the property mAutotuneRange
        expect(instance).to.have.property('mAutotuneRange');
        // expect(instance.mAutotuneRange).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotunePV (base name: "m_AutotunePV")', function() {
        // TODO: update the code to test the property mAutotunePV
        expect(instance).to.have.property('mAutotunePV');
        // expect(instance.mAutotunePV).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotuneByFeatures (base name: "m_AutotuneByFeatures")', function() {
        // TODO: update the code to test the property mAutotuneByFeatures
        expect(instance).to.have.property('mAutotuneByFeatures');
        // expect(instance.mAutotuneByFeatures).to.be(expectedValueLiteral);
      });

      it('should have the property mMaxClusters (base name: "m_MaxClusters")', function() {
        // TODO: update the code to test the property mMaxClusters
        expect(instance).to.have.property('mMaxClusters');
        // expect(instance.mMaxClusters).to.be(expectedValueLiteral);
      });

      it('should have the property mFeaturesToTuneArray (base name: "m_FeaturesToTuneArray")', function() {
        // TODO: update the code to test the property mFeaturesToTuneArray
        expect(instance).to.have.property('mFeaturesToTuneArray');
        // expect(instance.mFeaturesToTuneArray).to.be(expectedValueLiteral);
      });

    });
  });

}));
