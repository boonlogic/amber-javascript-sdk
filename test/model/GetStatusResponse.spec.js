/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetStatusResponse', function() {
      beforeEach(function() {
        instance = new AmberApiServer.GetStatusResponse();
      });

      it('should create an instance of GetStatusResponse', function() {
        // TODO: update the code to test GetStatusResponse
        expect(instance).to.be.a(AmberApiServer.GetStatusResponse);
      });

      it('should have the property pca (base name: "pca")', function() {
        // TODO: update the code to test the property pca
        expect(instance).to.have.property('pca');
        // expect(instance.pca).to.be(expectedValueLiteral);
      });

      it('should have the property clusterGrowth (base name: "clusterGrowth")', function() {
        // TODO: update the code to test the property clusterGrowth
        expect(instance).to.have.property('clusterGrowth');
        // expect(instance.clusterGrowth).to.be(expectedValueLiteral);
      });

      it('should have the property clusterSizes (base name: "clusterSizes")', function() {
        // TODO: update the code to test the property clusterSizes
        expect(instance).to.have.property('clusterSizes');
        // expect(instance.clusterSizes).to.be(expectedValueLiteral);
      });

      it('should have the property anomalyIndexes (base name: "anomalyIndexes")', function() {
        // TODO: update the code to test the property anomalyIndexes
        expect(instance).to.have.property('anomalyIndexes');
        // expect(instance.anomalyIndexes).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyIndexes (base name: "frequencyIndexes")', function() {
        // TODO: update the code to test the property frequencyIndexes
        expect(instance).to.have.property('frequencyIndexes');
        // expect(instance.frequencyIndexes).to.be(expectedValueLiteral);
      });

      it('should have the property distanceIndexes (base name: "distanceIndexes")', function() {
        // TODO: update the code to test the property distanceIndexes
        expect(instance).to.have.property('distanceIndexes');
        // expect(instance.distanceIndexes).to.be(expectedValueLiteral);
      });

      it('should have the property totalInferences (base name: "totalInferences")', function() {
        // TODO: update the code to test the property totalInferences
        expect(instance).to.have.property('totalInferences');
        // expect(instance.totalInferences).to.be(expectedValueLiteral);
      });

      it('should have the property numClusters (base name: "numClusters")', function() {
        // TODO: update the code to test the property numClusters
        expect(instance).to.have.property('numClusters');
        // expect(instance.numClusters).to.be(expectedValueLiteral);
      });

      it('should have the property anomalyThreshold (base name: "anomalyThreshold")', function() {
        // TODO: update the code to test the property anomalyThreshold
        expect(instance).to.have.property('anomalyThreshold');
        // expect(instance.anomalyThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

    });
  });

}));
