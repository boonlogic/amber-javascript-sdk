/**
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmberApiServer.GetStatusResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetStatusResponse', function() {
    it('should create an instance of GetStatusResponse', function() {
      // uncomment below and update the code to test GetStatusResponse
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be.a(AmberApiServer.GetStatusResponse);
    });

    it('should have the property anomalyIndexes (base name: "anomalyIndexes")', function() {
      // uncomment below and update the code to test the property anomalyIndexes
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property clusterGrowth (base name: "clusterGrowth")', function() {
      // uncomment below and update the code to test the property clusterGrowth
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property clusterSizes (base name: "clusterSizes")', function() {
      // uncomment below and update the code to test the property clusterSizes
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property distanceIndexes (base name: "distanceIndexes")', function() {
      // uncomment below and update the code to test the property distanceIndexes
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property frequencyIndexes (base name: "frequencyIndexes")', function() {
      // uncomment below and update the code to test the property frequencyIndexes
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property numClusters (base name: "numClusters")', function() {
      // uncomment below and update the code to test the property numClusters
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property pca (base name: "pca")', function() {
      // uncomment below and update the code to test the property pca
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

    it('should have the property totalInferences (base name: "totalInferences")', function() {
      // uncomment below and update the code to test the property totalInferences
      //var instane = new AmberApiServer.GetStatusResponse();
      //expect(instance).to.be();
    });

  });

}));
