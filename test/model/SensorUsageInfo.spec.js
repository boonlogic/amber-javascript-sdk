/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SensorUsageInfo', function() {
      beforeEach(function() {
        instance = new AmberApiServer.SensorUsageInfo();
      });

      it('should create an instance of SensorUsageInfo', function() {
        // TODO: update the code to test SensorUsageInfo
        expect(instance).to.be.a(AmberApiServer.SensorUsageInfo);
      });

      it('should have the property postConfig (base name: "postConfig")', function() {
        // TODO: update the code to test the property postConfig
        expect(instance).to.have.property('postConfig');
        // expect(instance.postConfig).to.be(expectedValueLiteral);
      });

      it('should have the property postStream (base name: "postStream")', function() {
        // TODO: update the code to test the property postStream
        expect(instance).to.have.property('postStream');
        // expect(instance.postStream).to.be(expectedValueLiteral);
      });

      it('should have the property putSensor (base name: "putSensor")', function() {
        // TODO: update the code to test the property putSensor
        expect(instance).to.have.property('putSensor');
        // expect(instance.putSensor).to.be(expectedValueLiteral);
      });

      it('should have the property getSensor (base name: "getSensor")', function() {
        // TODO: update the code to test the property getSensor
        expect(instance).to.have.property('getSensor');
        // expect(instance.getSensor).to.be(expectedValueLiteral);
      });

      it('should have the property getConfig (base name: "getConfig")', function() {
        // TODO: update the code to test the property getConfig
        expect(instance).to.have.property('getConfig');
        // expect(instance.getConfig).to.be(expectedValueLiteral);
      });

      it('should have the property getStatus (base name: "getStatus")', function() {
        // TODO: update the code to test the property getStatus
        expect(instance).to.have.property('getStatus');
        // expect(instance.getStatus).to.be(expectedValueLiteral);
      });

      it('should have the property getRootCause (base name: "getRootCause")', function() {
        // TODO: update the code to test the property getRootCause
        expect(instance).to.have.property('getRootCause');
        // expect(instance.getRootCause).to.be(expectedValueLiteral);
      });

      it('should have the property getAmberSummary (base name: "getAmberSummary")', function() {
        // TODO: update the code to test the property getAmberSummary
        expect(instance).to.have.property('getAmberSummary');
        // expect(instance.getAmberSummary).to.be(expectedValueLiteral);
      });

      it('should have the property postPretrain (base name: "postPretrain")', function() {
        // TODO: update the code to test the property postPretrain
        expect(instance).to.have.property('postPretrain');
        // expect(instance.postPretrain).to.be(expectedValueLiteral);
      });

      it('should have the property getPretrain (base name: "getPretrain")', function() {
        // TODO: update the code to test the property getPretrain
        expect(instance).to.have.property('getPretrain');
        // expect(instance.getPretrain).to.be(expectedValueLiteral);
      });

    });
  });

}));
