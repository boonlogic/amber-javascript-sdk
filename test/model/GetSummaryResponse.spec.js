/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetSummaryResponse', function() {
      beforeEach(function() {
        instance = new AmberApiServer.GetSummaryResponse();
      });

      it('should create an instance of GetSummaryResponse', function() {
        // TODO: update the code to test GetSummaryResponse
        expect(instance).to.be.a(AmberApiServer.GetSummaryResponse);
      });

      it('should have the property magicNumber (base name: "MagicNumber")', function() {
        // TODO: update the code to test the property magicNumber
        expect(instance).to.have.property('magicNumber');
        // expect(instance.magicNumber).to.be(expectedValueLiteral);
      });

      it('should have the property versionNumber (base name: "VersionNumber")', function() {
        // TODO: update the code to test the property versionNumber
        expect(instance).to.have.property('versionNumber');
        // expect(instance.versionNumber).to.be(expectedValueLiteral);
      });

      it('should have the property mNano (base name: "m_Nano")', function() {
        // TODO: update the code to test the property mNano
        expect(instance).to.have.property('mNano');
        // expect(instance.mNano).to.be(expectedValueLiteral);
      });

      it('should have the property mBufferStats (base name: "m_BufferStats")', function() {
        // TODO: update the code to test the property mBufferStats
        expect(instance).to.have.property('mBufferStats');
        // expect(instance.mBufferStats).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotune (base name: "m_Autotune")', function() {
        // TODO: update the code to test the property mAutotune
        expect(instance).to.have.property('mAutotune');
        // expect(instance.mAutotune).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotuningElbowClusterCounts (base name: "m_AutotuningElbowClusterCounts")', function() {
        // TODO: update the code to test the property mAutotuningElbowClusterCounts
        expect(instance).to.have.property('mAutotuningElbowClusterCounts');
        // expect(instance.mAutotuningElbowClusterCounts).to.be(expectedValueLiteral);
      });

      it('should have the property mAutotuningElbowPVArray (base name: "m_AutotuningElbowPVArray")', function() {
        // TODO: update the code to test the property mAutotuningElbowPVArray
        expect(instance).to.have.property('mAutotuningElbowPVArray');
        // expect(instance.mAutotuningElbowPVArray).to.be(expectedValueLiteral);
      });

      it('should have the property mStreamingParameters (base name: "m_StreamingParameters")', function() {
        // TODO: update the code to test the property mStreamingParameters
        expect(instance).to.have.property('mStreamingParameters');
        // expect(instance.mStreamingParameters).to.be(expectedValueLiteral);
      });

      it('should have the property mAmberStatus (base name: "m_AmberStatus")', function() {
        // TODO: update the code to test the property mAmberStatus
        expect(instance).to.have.property('mAmberStatus');
        // expect(instance.mAmberStatus).to.be(expectedValueLiteral);
      });

      it('should have the property mTraining (base name: "m_Training")', function() {
        // TODO: update the code to test the property mTraining
        expect(instance).to.have.property('mTraining');
        // expect(instance.mTraining).to.be(expectedValueLiteral);
      });

      it('should have the property mAnomalyThreshold (base name: "m_AnomalyThreshold")', function() {
        // TODO: update the code to test the property mAnomalyThreshold
        expect(instance).to.have.property('mAnomalyThreshold');
        // expect(instance.mAnomalyThreshold).to.be(expectedValueLiteral);
      });

      it('should have the property mAmberWarningCriticalValue (base name: "m_AmberWarningCriticalValue")', function() {
        // TODO: update the code to test the property mAmberWarningCriticalValue
        expect(instance).to.have.property('mAmberWarningCriticalValue');
        // expect(instance.mAmberWarningCriticalValue).to.be(expectedValueLiteral);
      });

      it('should have the property mAmberAlertCriticalValue (base name: "m_AmberAlertCriticalValue")', function() {
        // TODO: update the code to test the property mAmberAlertCriticalValue
        expect(instance).to.have.property('mAmberAlertCriticalValue');
        // expect(instance.mAmberAlertCriticalValue).to.be(expectedValueLiteral);
      });

      it('should have the property mErrorStringBuffer (base name: "m_ErrorStringBuffer")', function() {
        // TODO: update the code to test the property mErrorStringBuffer
        expect(instance).to.have.property('mErrorStringBuffer');
        // expect(instance.mErrorStringBuffer).to.be(expectedValueLiteral);
      });

      it('should have the property mClusteringParametersInitialized (base name: "m_ClusteringParametersInitialized")', function() {
        // TODO: update the code to test the property mClusteringParametersInitialized
        expect(instance).to.have.property('mClusteringParametersInitialized');
        // expect(instance.mClusteringParametersInitialized).to.be(expectedValueLiteral);
      });

      it('should have the property mStreamingMode (base name: "m_StreamingMode")', function() {
        // TODO: update the code to test the property mStreamingMode
        expect(instance).to.have.property('mStreamingMode');
        // expect(instance.mStreamingMode).to.be(expectedValueLiteral);
      });

      it('should have the property mStreamingModeStatus (base name: "m_StreamingModeStatus")', function() {
        // TODO: update the code to test the property mStreamingModeStatus
        expect(instance).to.have.property('mStreamingModeStatus');
        // expect(instance.mStreamingModeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property mModifiedAt (base name: "m_ModifiedAt")', function() {
        // TODO: update the code to test the property mModifiedAt
        expect(instance).to.have.property('mModifiedAt');
        // expect(instance.mModifiedAt).to.be(expectedValueLiteral);
      });

      it('should have the property mAnomalyMetricByAnomalyCount (base name: "m_AnomalyMetricByAnomalyCount")', function() {
        // TODO: update the code to test the property mAnomalyMetricByAnomalyCount
        expect(instance).to.have.property('mAnomalyMetricByAnomalyCount');
        // expect(instance.mAnomalyMetricByAnomalyCount).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentAnomalyCount (base name: "m_RecentAnomalyCount")', function() {
        // TODO: update the code to test the property mRecentAnomalyCount
        expect(instance).to.have.property('mRecentAnomalyCount');
        // expect(instance.mRecentAnomalyCount).to.be(expectedValueLiteral);
      });

      it('should have the property mResultsIDArray (base name: "m_ResultsIDArray")', function() {
        // TODO: update the code to test the property mResultsIDArray
        expect(instance).to.have.property('mResultsIDArray');
        // expect(instance.mResultsIDArray).to.be(expectedValueLiteral);
      });

      it('should have the property mTrainingSamples (base name: "m_TrainingSamples")', function() {
        // TODO: update the code to test the property mTrainingSamples
        expect(instance).to.have.property('mTrainingSamples');
        // expect(instance.mTrainingSamples).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentSamples (base name: "m_RecentSamples")', function() {
        // TODO: update the code to test the property mRecentSamples
        expect(instance).to.have.property('mRecentSamples');
        // expect(instance.mRecentSamples).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentRawSamples (base name: "m_RecentRawSamples")', function() {
        // TODO: update the code to test the property mRecentRawSamples
        expect(instance).to.have.property('mRecentRawSamples');
        // expect(instance.mRecentRawSamples).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentTimes (base name: "m_RecentTimes")', function() {
        // TODO: update the code to test the property mRecentTimes
        expect(instance).to.have.property('mRecentTimes');
        // expect(instance.mRecentTimes).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentSIs (base name: "m_RecentSIs")', function() {
        // TODO: update the code to test the property mRecentSIs
        expect(instance).to.have.property('mRecentSIs');
        // expect(instance.mRecentSIs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentRIs (base name: "m_RecentRIs")', function() {
        // TODO: update the code to test the property mRecentRIs
        expect(instance).to.have.property('mRecentRIs');
        // expect(instance.mRecentRIs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentADs (base name: "m_RecentADs")', function() {
        // TODO: update the code to test the property mRecentADs
        expect(instance).to.have.property('mRecentADs');
        // expect(instance.mRecentADs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentAHs (base name: "m_RecentAHs")', function() {
        // TODO: update the code to test the property mRecentAHs
        expect(instance).to.have.property('mRecentAHs');
        // expect(instance.mRecentAHs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentIDs (base name: "m_RecentIDs")', function() {
        // TODO: update the code to test the property mRecentIDs
        expect(instance).to.have.property('mRecentIDs');
        // expect(instance.mRecentIDs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentAMs (base name: "m_RecentAMs")', function() {
        // TODO: update the code to test the property mRecentAMs
        expect(instance).to.have.property('mRecentAMs');
        // expect(instance.mRecentAMs).to.be(expectedValueLiteral);
      });

      it('should have the property mRecentAWs (base name: "m_RecentAWs")', function() {
        // TODO: update the code to test the property mRecentAWs
        expect(instance).to.have.property('mRecentAWs');
        // expect(instance.mRecentAWs).to.be(expectedValueLiteral);
      });

    });
  });

}));
