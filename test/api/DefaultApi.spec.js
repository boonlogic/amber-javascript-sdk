/**
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmberApiServer);
  }
}(this, function(expect, AmberApiServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmberApiServer.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('deleteSensor', function() {
      it('should call deleteSensor successfully', function(done) {
        //uncomment below and update the code to test deleteSensor
        //instance.deleteSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfig', function() {
      it('should call getConfig successfully', function(done) {
        //uncomment below and update the code to test getConfig
        //instance.getConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSensor', function() {
      it('should call getSensor successfully', function(done) {
        //uncomment below and update the code to test getSensor
        //instance.getSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSensors', function() {
      it('should call getSensors successfully', function(done) {
        //uncomment below and update the code to test getSensors
        //instance.getSensors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatus', function() {
      it('should call getStatus successfully', function(done) {
        //uncomment below and update the code to test getStatus
        //instance.getStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postConfig', function() {
      it('should call postConfig successfully', function(done) {
        //uncomment below and update the code to test postConfig
        //instance.postConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postOauth2', function() {
      it('should call postOauth2 successfully', function(done) {
        //uncomment below and update the code to test postOauth2
        //instance.postOauth2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postSensor', function() {
      it('should call postSensor successfully', function(done) {
        //uncomment below and update the code to test postSensor
        //instance.postSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postStream', function() {
      it('should call postStream successfully', function(done) {
        //uncomment below and update the code to test postStream
        //instance.postStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSensor', function() {
      it('should call putSensor successfully', function(done) {
        //uncomment below and update the code to test putSensor
        //instance.putSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
