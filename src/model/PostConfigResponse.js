/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {FeatureConfig} from './FeatureConfig';

/**
 * The PostConfigResponse model module.
 * @module model/PostConfigResponse
 * @version 1.0.3
 */
export class PostConfigResponse {
  /**
   * Constructs a new <code>PostConfigResponse</code>.
   * @alias module:model/PostConfigResponse
   * @class
   * @param featureCount {Number} number of features per sample
   * @param streamingWindowSize {Number} streaming window size
   * @param samplesToBuffer {Number} the number of samples to be applied before autotuning begins
   * @param anomalyHistoryWindow {Number} the number of samples to use when calculating AH
   * @param learningRateNumerator {Number} enables graduation requirements for learning
   * @param learningRateDenominator {Number} enables graduation requirements for learning
   * @param learningMaxClusters {Number} learning graduation requirement for stopping learning upon reaching this cluster count
   * @param learningMaxSamples {Number} learning graduation requirement for stopping learning after acquiring this many samples
   */
  constructor(featureCount, streamingWindowSize, samplesToBuffer, anomalyHistoryWindow, learningRateNumerator, learningRateDenominator, learningMaxClusters, learningMaxSamples) {
    this.featureCount = featureCount;
    this.streamingWindowSize = streamingWindowSize;
    this.samplesToBuffer = samplesToBuffer;
    this.anomalyHistoryWindow = anomalyHistoryWindow;
    this.learningRateNumerator = learningRateNumerator;
    this.learningRateDenominator = learningRateDenominator;
    this.learningMaxClusters = learningMaxClusters;
    this.learningMaxSamples = learningMaxSamples;
  }

  /**
   * Constructs a <code>PostConfigResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PostConfigResponse} obj Optional instance to populate.
   * @return {module:model/PostConfigResponse} The populated <code>PostConfigResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PostConfigResponse();
      if (data.hasOwnProperty('featureCount'))
        obj.featureCount = ApiClient.convertToType(data['featureCount'], 'Number');
      if (data.hasOwnProperty('streamingWindowSize'))
        obj.streamingWindowSize = ApiClient.convertToType(data['streamingWindowSize'], 'Number');
      if (data.hasOwnProperty('samplesToBuffer'))
        obj.samplesToBuffer = ApiClient.convertToType(data['samplesToBuffer'], 'Number');
      if (data.hasOwnProperty('anomalyHistoryWindow'))
        obj.anomalyHistoryWindow = ApiClient.convertToType(data['anomalyHistoryWindow'], 'Number');
      if (data.hasOwnProperty('learningRateNumerator'))
        obj.learningRateNumerator = ApiClient.convertToType(data['learningRateNumerator'], 'Number');
      if (data.hasOwnProperty('learningRateDenominator'))
        obj.learningRateDenominator = ApiClient.convertToType(data['learningRateDenominator'], 'Number');
      if (data.hasOwnProperty('learningMaxClusters'))
        obj.learningMaxClusters = ApiClient.convertToType(data['learningMaxClusters'], 'Number');
      if (data.hasOwnProperty('learningMaxSamples'))
        obj.learningMaxSamples = ApiClient.convertToType(data['learningMaxSamples'], 'Number');
      if (data.hasOwnProperty('features'))
        obj.features = ApiClient.convertToType(data['features'], [FeatureConfig]);
    }
    return obj;
  }
}

/**
 * number of features per sample
 * @member {Number} featureCount
 */
PostConfigResponse.prototype.featureCount = undefined;

/**
 * streaming window size
 * @member {Number} streamingWindowSize
 */
PostConfigResponse.prototype.streamingWindowSize = undefined;

/**
 * the number of samples to be applied before autotuning begins
 * @member {Number} samplesToBuffer
 */
PostConfigResponse.prototype.samplesToBuffer = undefined;

/**
 * the number of samples to use when calculating AH
 * @member {Number} anomalyHistoryWindow
 */
PostConfigResponse.prototype.anomalyHistoryWindow = undefined;

/**
 * enables graduation requirements for learning
 * @member {Number} learningRateNumerator
 */
PostConfigResponse.prototype.learningRateNumerator = undefined;

/**
 * enables graduation requirements for learning
 * @member {Number} learningRateDenominator
 */
PostConfigResponse.prototype.learningRateDenominator = undefined;

/**
 * learning graduation requirement for stopping learning upon reaching this cluster count
 * @member {Number} learningMaxClusters
 */
PostConfigResponse.prototype.learningMaxClusters = undefined;

/**
 * learning graduation requirement for stopping learning after acquiring this many samples
 * @member {Number} learningMaxSamples
 */
PostConfigResponse.prototype.learningMaxSamples = undefined;

/**
 * @member {Array.<module:model/FeatureConfig>} features
 */
PostConfigResponse.prototype.features = undefined;

