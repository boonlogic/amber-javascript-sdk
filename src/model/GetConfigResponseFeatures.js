/**
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The GetConfigResponseFeatures model module.
* @module model/GetConfigResponseFeatures
* @version 1.0.3
*/
export default class GetConfigResponseFeatures {
    /**
    * Constructs a new <code>GetConfigResponseFeatures</code>.
    * @alias module:model/GetConfigResponseFeatures
    * @class
    * @param maxVal {Number} corresponding maximum value
    * @param minVal {Number} the value that should be considered the minimum value for this feature. This can be set to a value larger than the actual min if you want to treat all value less than that as the same (for instance, to keep a noise spike from having undue influence in the clustering
    */

    constructor(maxVal, minVal) {
        
        
        this['maxVal'] = maxVal;
        this['minVal'] = minVal;
        
    }

    /**
    * Constructs a <code>GetConfigResponseFeatures</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GetConfigResponseFeatures} obj Optional instance to populate.
    * @return {module:model/GetConfigResponseFeatures} The populated <code>GetConfigResponseFeatures</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetConfigResponseFeatures();
                        
            
            if (data.hasOwnProperty('maxVal')) {
                obj['maxVal'] = ApiClient.convertToType(data['maxVal'], 'Number');
            }
            if (data.hasOwnProperty('minVal')) {
                obj['minVal'] = ApiClient.convertToType(data['minVal'], 'Number');
            }
        }
        return obj;
    }

    /**
    * corresponding maximum value
    * @member {Number} maxVal
    */
    'maxVal' = undefined;
    /**
    * the value that should be considered the minimum value for this feature. This can be set to a value larger than the actual min if you want to treat all value less than that as the same (for instance, to keep a noise spike from having undue influence in the clustering
    * @member {Number} minVal
    */
    'minVal' = undefined;




}
