/*
 * Amber API Server
 * Boon Logic Amber API Server
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {PCA} from './PCA';
import {Uint16Array} from './Uint16Array';
import {Uint64Array} from './Uint64Array';

/**
 * The GetStatusResponse model module.
 * @module model/GetStatusResponse
 * @version 1.0.3
 */
export class GetStatusResponse {
  /**
   * Constructs a new <code>GetStatusResponse</code>.
   * @alias module:model/GetStatusResponse
   * @class
   * @param pca {module:model/PCA} 
   * @param clusterGrowth {module:model/Uint64Array} 
   * @param clusterSizes {module:model/Uint64Array} 
   * @param anomalyIndexes {module:model/Uint16Array} 
   * @param frequencyIndexes {module:model/Uint16Array} 
   * @param distanceIndexes {module:model/Uint16Array} 
   * @param totalInferences {Number} inferences since the most recent restart
   * @param numClusters {Number} 
   * @param anomalyThreshold {Number} 
   * @param state {String} state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring
   */
  constructor(pca, clusterGrowth, clusterSizes, anomalyIndexes, frequencyIndexes, distanceIndexes, totalInferences, numClusters, anomalyThreshold, state) {
    this.pca = pca;
    this.clusterGrowth = clusterGrowth;
    this.clusterSizes = clusterSizes;
    this.anomalyIndexes = anomalyIndexes;
    this.frequencyIndexes = frequencyIndexes;
    this.distanceIndexes = distanceIndexes;
    this.totalInferences = totalInferences;
    this.numClusters = numClusters;
    this.anomalyThreshold = anomalyThreshold;
    this.state = state;
  }

  /**
   * Constructs a <code>GetStatusResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetStatusResponse} obj Optional instance to populate.
   * @return {module:model/GetStatusResponse} The populated <code>GetStatusResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GetStatusResponse();
      if (data.hasOwnProperty('pca'))
        obj.pca = PCA.constructFromObject(data['pca']);
      if (data.hasOwnProperty('clusterGrowth'))
        obj.clusterGrowth = Uint64Array.constructFromObject(data['clusterGrowth']);
      if (data.hasOwnProperty('clusterSizes'))
        obj.clusterSizes = Uint64Array.constructFromObject(data['clusterSizes']);
      if (data.hasOwnProperty('anomalyIndexes'))
        obj.anomalyIndexes = Uint16Array.constructFromObject(data['anomalyIndexes']);
      if (data.hasOwnProperty('frequencyIndexes'))
        obj.frequencyIndexes = Uint16Array.constructFromObject(data['frequencyIndexes']);
      if (data.hasOwnProperty('distanceIndexes'))
        obj.distanceIndexes = Uint16Array.constructFromObject(data['distanceIndexes']);
      if (data.hasOwnProperty('totalInferences'))
        obj.totalInferences = ApiClient.convertToType(data['totalInferences'], 'Number');
      if (data.hasOwnProperty('numClusters'))
        obj.numClusters = ApiClient.convertToType(data['numClusters'], 'Number');
      if (data.hasOwnProperty('anomalyThreshold'))
        obj.anomalyThreshold = ApiClient.convertToType(data['anomalyThreshold'], 'Number');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/PCA} pca
 */
GetStatusResponse.prototype.pca = undefined;

/**
 * @member {module:model/Uint64Array} clusterGrowth
 */
GetStatusResponse.prototype.clusterGrowth = undefined;

/**
 * @member {module:model/Uint64Array} clusterSizes
 */
GetStatusResponse.prototype.clusterSizes = undefined;

/**
 * @member {module:model/Uint16Array} anomalyIndexes
 */
GetStatusResponse.prototype.anomalyIndexes = undefined;

/**
 * @member {module:model/Uint16Array} frequencyIndexes
 */
GetStatusResponse.prototype.frequencyIndexes = undefined;

/**
 * @member {module:model/Uint16Array} distanceIndexes
 */
GetStatusResponse.prototype.distanceIndexes = undefined;

/**
 * inferences since the most recent restart
 * @member {Number} totalInferences
 */
GetStatusResponse.prototype.totalInferences = undefined;

/**
 * @member {Number} numClusters
 */
GetStatusResponse.prototype.numClusters = undefined;

/**
 * @member {Number} anomalyThreshold
 */
GetStatusResponse.prototype.anomalyThreshold = undefined;

/**
 * state of the sensor. Possible state variables are: Error, Buffering, Autotuning, Learning, Monitoring
 * @member {String} state
 */
GetStatusResponse.prototype.state = undefined;

